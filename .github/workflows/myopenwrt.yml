# 多workflow产生多个固件
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt HC5962-default

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      config:
        description: 'custom config'
        required: false
        default: 'false'
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config.d/default-hc5661
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest   #-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        touch test.txt
        ls
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: Custom configure file
      if: (github.event.inputs.config == 'true' && github.event.inputs.config  != 'false')
      run: |
        rm -f ./.config*
        touch ./.config
        # 5962示例
        # ========================固件定制部分========================
        # 
        # 
        # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
        # 
        # 以下为定制化固件选项和说明:
        #
        #
        # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
        # 
        #          =========================================
        #         |  # 取消编译VMware镜像:                   |
        #         |  cat >> .config <<EOF                   |
        #         |  # CONFIG_VMDK_IMAGES is not set        |
        #         |  EOF                                    |
        #          =========================================
        #
        # 
        # 以下是一些提前准备好的一些插件选项.
        # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
        # 如果不需要代码块里的某一项配置, 只需要删除相应行.
        #
        # 如果需要其他插件, 请按照示例自行添加.
        # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
        # 
        # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
        # 
        # 编译小娱固件:
        cat >> .config <<EOF
        CONFIG_TARGET_ramips=y
        CONFIG_TARGET_ramips_mt7621=y
        CONFIG_TARGET_ramips_mt7621_DEVICE_hiwifi_hc5962=y
        EOF
        # 固件压缩:
        # cat >> .config <<EOF
        # CONFIG_TARGET_IMAGES_GZIP=y
        # EOF
        # 编译UEFI固件:
        # cat >> .config <<EOF
        # CONFIG_EFI_IMAGES=y
        # EOF
        # IPv6支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        CONFIG_PACKAGE_ipv6helper=y
        EOF
        # 多文件系统支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-fs-nfs=y
        CONFIG_PACKAGE_kmod-fs-nfs-common=y
        CONFIG_PACKAGE_kmod-fs-nfs-v3=y
        CONFIG_PACKAGE_kmod-fs-nfs-v4=y
        CONFIG_PACKAGE_kmod-fs-ntfs=y
        CONFIG_PACKAGE_kmod-fs-squashfs=y
        EOF
        # USB3.0支持:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_kmod-usb-ohci=y
        # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
        # CONFIG_PACKAGE_kmod-usb2=y
        # CONFIG_PACKAGE_kmod-usb2-pci=y
        # CONFIG_PACKAGE_kmod-usb3=y
        # EOF
        # 常用LuCI插件选择:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
        CONFIG_PACKAGE_luci-app-accesscontrol=y
        CONFIG_PACKAGE_luci-app-adbyby-plus=y
        CONFIG_PACKAGE_luci-app-arpbind=y
        CONFIG_PACKAGE_luci-app-autoreboot=y
        CONFIG_PACKAGE_luci-app-ddns=y
        CONFIG_PACKAGE_luci-app-filetransfer=y
        CONFIG_PACKAGE_luci-app-firewall=y
        CONFIG_PACKAGE_luci-app-flowoffload=y
        CONFIG_PACKAGE_luci-app-ipsec-vpnd=y
        CONFIG_PACKAGE_luci-app-nlbwmon=y
        CONFIG_PACKAGE_luci-app-pptp-server=y
        CONFIG_PACKAGE_luci-app-ramfree=y
        CONFIG_PACKAGE_luci-app-sqm=y
        CONFIG_PACKAGE_luci-app-ttyd=y
        CONFIG_PACKAGE_luci-app-upnp=y
        CONFIG_PACKAGE_luci-app-vlmcsd=y
        CONFIG_PACKAGE_luci-app-wol=y
        CONFIG_PACKAGE_luci-app-ntpc=y
        CONFIG_PACKAGE_luci-app-sqm=y
        CONFIG_PACKAGE_luci-app-statistics=y
        CONFIG_PACKAGE_luci-app-vlmcsd=y
        CONFIG_PACKAGE_luci-app-vnstat=y
        CONFIG_PACKAGE_luci-app-watchcat=y
        CONFIG_PACKAGE_luci-app-webadmin=y
        CONFIG_PACKAGE_luci-proto-bonding=y
        # CONFIG_PACKAGE_luci-app-zerotier is not set
        # CONFIG_PACKAGE_luci-app-vsftpd is not set
        # CONFIG_PACKAGE_luci-app-xlnetacc is not set
        EOF
        # LuCI主题:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        EOF
        # 常用软件包:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_curl=y
        # CONFIG_PACKAGE_htop=y
        # CONFIG_PACKAGE_nano=y
        # CONFIG_PACKAGE_screen=y
        # CONFIG_PACKAGE_tree=y
        # CONFIG_PACKAGE_vim-fuller=y
        # CONFIG_PACKAGE_wget=y
        # EOF
        # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
        # cat >> .config <<EOF
        # # CONFIG_TARGET_IMAGES_PAD is not set
        # # CONFIG_VMDK_IMAGES is not set
        # EOF
        # 
        # ========================固件定制部分结束========================
        # 
        #sed -i 's/^[ \t]*//g' ./.config
        #make defconfig
        
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

 # 准备固件
    - name: Organize Firmware
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        #find ./ -type d -name "packages" | xargs rm -rf {}
        cd openwrt/bin/targets/*/*
        rm -rf packages
        rm *.buildinfo -r

        echo "========================================"
        echo "[Space Usage]:"
        echo "========================================"
        df -hT
        echo "========================================"
        echo "[File List]:" 
        echo "========================================"
        echo "Current Path:" $PWD
        ls -l -A
        echo "========================================"

        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}


    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        


    
# 定制标签
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          cat >> release.txt << EOF    
          1、源码：${{ env.REPO_URL }} 分支：${{ env.REPO_BRANCH }}
          2、设备：${{ env.DEVICE_NAME }}
          3、编译时间：${{ env.FILE_DATE }}
          ### -- Build with Github Actions on ${{ env.FILE_DATE }} for ${{ env.DEVICE_NAME }} device
          外链下载：
          EOF
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer Download (24hrs)](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer Download (7days)](${{ steps.wetransfer.outputs.url }})" >> release.txt          
          echo "::set-output name=status::success"

# 文件组织
    - name: Remove and tar
      id: tar
 #     if: (github.event.inputs.ipks == 'true' && github.event.inputs.ipks  != 'false')  是点击run单独生成一个ipks，现在有独立工作流不需要了
      run: |
         echo "Current Path:" $PWD
         cd openwrt
         tar -czf build_results.tar.gz bin
         mv build_results.tar.gz ${{ env.FIRMWARE }}/build_results.tar.gz
         echo "打包完成,当前目录文件有："
         ls
  #tar -czf ${{ env.FIRMWARE }}/build-results.tar.gz openwrt/bin
# rm ${{ env.FIRMWARE }}/*.buildinfo -r 在上面上传清理
# 插件全编译执行 find openwrt/bin/packages/mipsel_24kc -name "*.ipk" | xargs tar czvf ${{ env.FIRMWARE }}/mipsel_24kc-IPK.tar.gz 

# 发行文件
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
#      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.DEVICE_NAME }}_${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*



    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 9
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
